// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É "–ß–µ—Ä—Ç–æ–≥–∏ –§—Ä—ñ–ª–∞–Ω—Å–µ—Ä–∞"
import { isMobile } from "./functions.js";
// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–æ–¥—É–ª—ñ–≤
import { flsModules } from "./modules.js";


function phoneMask(input) {
    input.addEventListener('input', function(e) {
        let value = input.value.replace(/\D/g, ''); // –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã

        // –≤—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å 7
        if (!value.startsWith('7')) value = '7' + value;

        // –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –ø–æ—Å–ª–µ –∫–æ–¥–∞
        if (value.length > 1) {
            const allowed = ['0','1','3','4','5','6','7','9'];
            if (!allowed.includes(value[1])) {
                value = value[0]; // —É–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—É—é —Ü–∏—Ñ—Ä—É
            }
        }

        // —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –±–∞–∑–æ–π +7 (
        let formatted = '+7 (';
        if (value.length > 1) formatted += value.substring(1,4);
        if (value.length > 4) formatted += ') ' + value.substring(4,7);
        if (value.length > 7) formatted += '-' + value.substring(7,9);
        if (value.length > 9) formatted += '-' + value.substring(9,11);

        input.value = formatted;
    });

    // –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∞–≤–∏—à –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
    input.addEventListener('keydown', function(e) {
        const pos = input.selectionStart;

        // –∑–∞–ø—Ä–µ—â–∞–µ–º backspace/—É–¥–∞–ª–µ–Ω–∏–µ +7 (
        if ((pos <= 3) && (e.key === 'Backspace' || e.key === 'Delete')) {
            e.preventDefault();
        }

        // –∑–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥ 8 –∫–∞–∫ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ +7
        if (pos === 4 && e.key >= '0' && e.key <= '9') {
            const allowed = ['0','1','3','4','5','6','7','9'];
            if (!allowed.includes(e.key)) e.preventDefault();
        }

        // –∑–∞–ø—Ä–µ—â–∞–µ–º –≤–≤–æ–¥ –ª—é–±—ã—Ö –±—É–∫–≤/—Å–∏–º–≤–æ–ª–æ–≤
        if (!((e.key >= '0' && e.key <= '9') || ['Backspace','Delete','ArrowLeft','ArrowRight'].includes(e.key))) {
            e.preventDefault();
        }
    });
}

// –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Å–∫—É –∫ –Ω—É–∂–Ω—ã–º –∏–Ω–ø—É—Ç–∞–º
const quizInput = document.getElementById("quizFormPhone");
const phoneInput = document.getElementById("popupFormPhone");
const creditPhone = document.getElementById("credit-phone");

phoneMask(quizInput);
phoneMask(phoneInput);
phoneMask(creditPhone);


// -------------------- Calculator credit --------------------

const PRICE_PER_SQM = 55000; // üí° –ø–æ—Å—Ç–∞–≤—å –Ω—É–∂–Ω—É—é —Ü–µ–Ω—É –∑–∞ –º¬≤

const areaInput = document.getElementById('input-area');
const areaValue = document.getElementById('area-value');
const monthsInput = document.getElementById('input-months');
const monthsValue = document.getElementById('months-value');
const totalPriceElement = document.getElementById('total-price');
const initialPaymentElement = document.getElementById('initial-payment');
const monthlyPaymentElement = document.getElementById('monthly-payment');

// —Ñ–æ—Ä–º–∞
const sendFormCalc = document.getElementById('calc-form'); // <form id="calc-form">
const calcErrMessage = document.querySelector('.form-error-calc'); // <div class="calc-phone-error"></div>
const calcFormBtn = document.querySelector('.results-credit__send');
let succeseCalcMessage = document.querySelector('.form-calc-succes');

let areaCalc = parseInt(areaInput.value);
let monthsCalc = parseInt(monthsInput.value);

function formatPrice(price) {
    return new Intl.NumberFormat('ru-RU').format(Math.round(price)) + ' ‚ÇΩ';
}

function calculateValues() {
    const totalPrice = areaCalc * PRICE_PER_SQM;
    const initialPayment = totalPrice * 0.2;
    const monthlyPayment = (totalPrice - initialPayment) / monthsCalc;

    totalPriceElement.textContent = formatPrice(totalPrice);
    initialPaymentElement.textContent = formatPrice(initialPayment);
    monthlyPaymentElement.textContent = formatPrice(monthlyPayment);
}

areaInput.addEventListener('input', function() {
    areaCalc = parseInt(this.value);
    areaValue.textContent = areaCalc;
    calculateValues();
});

monthsInput.addEventListener('input', function() {
    monthsCalc = parseInt(this.value);
    monthsValue.textContent = monthsCalc;
    calculateValues();
});

// –ø–µ—Ä–≤–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
calculateValues();

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
sendFormCalc.addEventListener('submit', function(e) {
    e.preventDefault();

    const phone = creditPhone.value.trim();
    const phoneDigits = phone.replace(/\D/g, '');

    if (phoneDigits.length < 11) {
        calcErrMessage.textContent = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
        creditPhone.classList.add('error');
        return;
    } else {
        calcErrMessage.textContent = '';
        creditPhone.classList.remove('error');
    }

    calcFormBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∫–∞...';
    calcFormBtn.disabled = true;

    const totalPrice = areaCalc * PRICE_PER_SQM;
    const initialPayment = totalPrice * 0.2;
    const monthlyPayment = (totalPrice - initialPayment) / monthsCalc;

    const data = {
        phone,
        area: areaCalc,
        months: monthsCalc,
        totalPrice,
        initialPayment,
        monthlyPayment
    };

    fetch('/api/send-telegram', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
    })
    .then(response => {
        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + response.status);
        return response.json();
    })
    .then(data => {
        if (data.success) {
          calcFormBtn.textContent = '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';
            succeseCalcMessage.innerHTML = '–°–ø–∞—Å–∏–±–æ, –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.'
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞:', error);
        calcErrMessage.textContent = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
        calcFormBtn.disabled = false;
        calcFormBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';
    });
});




// -------------------- QUIZ APP --------------------

const quizObj = [
  {
    type: "image-answ",
    question: "–ß—Ç–æ –±—É–¥–µ–º —Å—Ç—Ä–æ–∏—Ç—å?",
    options: [
      {
        imageUrl: "img/quiz/quiz-1_barnhaus.webp",
        answer: "–ë–∞—Ä–Ω—Ö–∞—É—Å",
        type: "radio",
        name: '–¢–∏–ø'
      },
      {
        imageUrl: "img/quiz/quiz-1_afreim.webp",
        answer: "–ê-—Ñ—Ä–µ–π–º",
        type: "radio",
        name: '–¢–∏–ø'
      },
      {
        imageUrl: "img/quiz/quiz-1_classic.webp",
        answer: "–ö–ª–∞—Å—Å–∏–∫—É",
        type: "radio",
        name: '–¢–∏–ø'
      },
      {
        imageUrl: "img/quiz/quiz-1_bania.webp",
        answer: "–ë–∞–Ω—é",
        type: "radio",
        name: '–¢–∏–ø'
      }
    ]
  },
  {
    type: "image-answ",
    question: "–£–∫–∞–∂–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –±—É–¥—É—â–µ–≥–æ —Å—Ç—Ä–æ–µ–Ω–∏—è",
    options: [
      {
        imageUrl: "img/quiz/quiz-2_50.webp",
        answer: "–î–æ 50–º2",
        type: "radio",
        name: '–ü–ª–æ—â–∞–¥—å'
      },
      {
        imageUrl: "img/quiz/quiz-2_100.webp",
        answer: "50-100 –º2",
        type: "radio",
        name: '–ü–ª–æ—â–∞–¥—å'
      },
      {
        imageUrl: "img/quiz/quiz-2_150.webp",
        answer: "100-150 –º2",
        type: "radio",
        name: '–ü–ª–æ—â–∞–¥—å'
      },
      {
        imageUrl: "img/quiz/quiz-2_200.webp",
        answer: "–ë–æ–ª–µ–µ 150–º2",
        type: "radio",
        name: '–ü–ª–æ—â–∞–¥—å'
      }
    ]
  },
  {
    type: "image-answ",
    question: "–ö–∞–∫–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –≤–∞–º –Ω—É–∂–Ω—ã?",
    options: [
      {
        imageUrl: "img/quiz/quiz-3_besedka.webp",
        answer: "–ë–µ—Å–µ–¥–∫–∞",
        type: "checkbox",
        name: '–î–æ–ø—ã'
      },
      {
        imageUrl: "img/quiz/quiz-3_terrasa.webp",
        answer: "–¢–µ—Ä—Ä–∞—Å–∞",
        type: "checkbox",
        name: '–î–æ–ø—ã'
      },
      {
        imageUrl: "img/quiz/quiz-3_sauna.webp",
        answer: "–°–∞—É–Ω–∞",
        type: "checkbox",
        name: '–î–æ–ø—ã'
      },
      {
        imageUrl: "img/quiz/quiz-3_not.webp",
        answer: "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è",
        type: "checkbox",
        name: '–î–æ–ø—ã'
      }
    ]
  },
  {
    type: "text-answ",
    question: "–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?",
    options: [
      {
        answer: "–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ",
        type: "radio",
        name: '–ö–æ–≥–¥–∞'
      },
      {
        answer: "–í —Ç–µ—á–µ–Ω–∏–µ 3-—Ö –º–µ—Å—è—Ü–µ–≤",
        type: "radio",
        name: '–ö–æ–≥–¥–∞'
      },
      {
        answer: "–í —Ç–µ—á–µ–Ω–∏–µ –ø–æ–ª—É–≥–æ–¥–∞",
        type: "radio",
        name: '–ö–æ–≥–¥–∞'
      },
      {
        answer: "–ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Å—Ä–∞–∑—É —Å—Ç—Ä–æ–∏–º—Å—è",
        type: "radio",
        name: '–ö–æ–≥–¥–∞'
      },
      {
        answer: "–ü–æ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è",
        type: "radio",
        name: '–ö–æ–≥–¥–∞'
      }
    ]
  },
  {
    type: "text-answ",
    question: "–ö–∞–∫–æ–≤ –≤–∞—à –±—é–¥–∂–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?",
    options: [
      {
        answer: "500 —Ç—ã—Å. —Ä—É–± - 3 –º–ª–Ω. —Ä—É–±",
        type: "radio",
        name: '–ë—é–¥–∂–µ—Ç'
      },
      {
        answer: "3 –º–ª–Ω. —Ä—É–± - 5 –º–ª–Ω. —Ä—É–±",
        type: "radio",
        name: '–ë—é–¥–∂–µ—Ç'
      },
      {
        answer: "5 –º–ª–Ω. —Ä—É–± - 7 –º–ª–Ω. —Ä—É–±",
        type: "radio",
        name: '–ë—é–¥–∂–µ—Ç'
      },
      {
        answer: "7 –º–ª–Ω. —Ä—É–± - 9 –º–ª–Ω. —Ä—É–±",
        type: "radio",
        name: '–ë—é–¥–∂–µ—Ç'
      },
      {
        answer: "–ë–æ–ª–µ–µ 9 –º–ª–Ω. —Ä—É–±",
        type: "radio",
        name: '–ë—é–¥–∂–µ—Ç'
      }
    ]
  },
  {
    type: "image-answ",
    question: "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å",
    options: [
      {
        imageUrl: "img/quiz/quiz-6_potolki.webp",
        answer: "–ù–∞—Ç—è–∂–Ω—ã–µ –ø–æ—Ç–æ–ª–∫–∏",
        type: "radio",
        name: '–ü–æ–¥–∞—Ä–æ–∫'
      },
      {
        imageUrl: "img/quiz/quiz-6_okna.webp",
        answer: "–ú—è–≥–∫–∏–µ –æ–∫–Ω–∞",
        type: "radio",
        name: '–ü–æ–¥–∞—Ä–æ–∫'
      },
      {
        imageUrl: "img/quiz/quiz-6_umniidom.webp",
        answer: "–£–º–Ω—ã–π –¥–æ–º",
        type: "radio",
        name: '–ü–æ–¥–∞—Ä–æ–∫'
      },
      {
        imageUrl: "img/quiz/quiz-6_discount.webp",
        answer: "–°–∫–∏–¥–∫–∞ 1%",
        type: "radio",
        name: '–ü–æ–¥–∞—Ä–æ–∫'
      }
    ]
  },
]

const quizApp = document.querySelector(".quiz__app");
const questionEl = quizApp.querySelector(".quiz__question");
const prevBtn = quizApp.querySelector(".quiz__prev");
const nextBtn = quizApp.querySelector(".quiz__next");
const quizContainer = document.querySelector(".quiz__container");
const mobQuizClose = document.querySelector(".mob-quiz-close");
const quizBarSuccess = document.querySelector(".quiz__bar-success");
const quizBarText = document.querySelector(".quiz__bar-text span");

let currentStep = 0;
let answers = {};
let mobQuizActivated = false;
let progressPercent = 0;

// ====== –†–ï–ù–î–ï–† –í–û–ü–†–û–°–û–í ======
function renderStep() {
  const step = quizObj[currentStep];
  questionEl.textContent = step.question;

  quizApp.querySelector(".quiz__answers-image")?.remove();
  quizApp.querySelector(".quiz__answers-text")?.remove();

  const answersWrapper = document.createElement("div");
  answersWrapper.className = step.type === "image-answ" ? "quiz__answers-image" : "quiz__answers-text";

  step.options?.forEach(opt => {
    const optionDiv = document.createElement("div");
    if (step.type === "image-answ") {
      optionDiv.className = "quiz__answer-image answer-image";
      optionDiv.innerHTML = `
        <label class="answer-image__label">
          <input type="${opt.type}" name="${opt.name}" value="${opt.answer}" class="answer-image__input">
          <div class="answer-image__item">
            <div class="answer-image__image">
              <img src="${opt.imageUrl}" alt="">
              <span class="_icon-checked"></span>
            </div>
            <div class="answer-image__text">${opt.answer}</div>
          </div>
        </label>
      `;
    } else {
      optionDiv.className = "quiz__answer-text answer-text";
      optionDiv.innerHTML = `
        <label class="answer-text__label">
          <input type="${opt.type}" name="${opt.name}" value="${opt.answer}" class="answer-text__input" />
          <button type="button" class="answer-text__text"><span class="_icon-checked"></span> ${opt.answer}</button>
        </label>
      `;
    }
    answersWrapper.appendChild(optionDiv);
  });

  questionEl.after(answersWrapper);

  const inputs = answersWrapper.querySelectorAll("input");
  const fieldName = step.options[0]?.name;

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  if (answers[fieldName]) {
    if (inputs[0].type === "radio") {
      inputs.forEach(i => {
        if (answers[fieldName] === i.value) {
          i.checked = true;
          i.closest(".quiz__answer-image, .quiz__answer-text")?.classList.add("selected-answer");
        }
      });
    } else if (inputs[0].type === "checkbox") {
      inputs.forEach(i => {
        if (answers[fieldName].includes(i.value)) {
          i.checked = true;
          i.closest(".quiz__answer-image, .quiz__answer-text")?.classList.add("selected-answer");
        }
      });
    }
  }

  if (inputs[0]) {
    if (inputs[0].type === "radio") {
      nextBtn.disabled = !Array.from(inputs).some(i => i.checked);
    } else {
      nextBtn.disabled = !(answers[fieldName] && answers[fieldName].length > 0);
    }
  } else {
    nextBtn.disabled = true;
  }

  function updateAfterRadioChange(changedInput) {
    answers[fieldName] = changedInput.value;

    inputs.forEach(i => {
      const parent = i.closest(".quiz__answer-image, .quiz__answer-text");
      if (i.checked) parent?.classList.add("selected-answer");
      else parent?.classList.remove("selected-answer");
    });

    nextBtn.disabled = !Array.from(inputs).some(i => i.checked);

    if (!mobQuizActivated) {
      quizContainer.classList.add("mob-quiz-active");
      if (window.innerWidth <= 768) document.documentElement.classList.add("lock");
      mobQuizActivated = true;
    }

    // –ê–≤—Ç–æ-–ø–µ—Ä–µ—Ö–æ–¥ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    setTimeout(() => goNextStep(), 300);
  }

  function updateAfterCheckboxChange(changedInput) {
    const parent = changedInput.closest(".quiz__answer-image, .quiz__answer-text");

    if (changedInput.checked) parent?.classList.add("selected-answer");
    else parent?.classList.remove("selected-answer");

    const checkedInputs = Array.from(parent.closest(".quiz__answers-text, .quiz__answers-image").querySelectorAll("input[type=checkbox]:checked"));
    const values = checkedInputs.map(i => i.value);
    answers[fieldName] = values.join(", ");

    nextBtn.disabled = values.length === 0;

    if (!mobQuizActivated && values.length > 0) {
      quizContainer.classList.add("mob-quiz-active");
      if (window.innerWidth <= 768) document.documentElement.classList.add("lock");
      mobQuizActivated = true;
    }
  }

  inputs.forEach(i => {
    i.addEventListener("change", () => {
      if (i.type === "radio") updateAfterRadioChange(i);
      else updateAfterCheckboxChange(i);
    });
  });

  const optionDivs = answersWrapper.querySelectorAll(".quiz__answer-image, .quiz__answer-text");
  optionDivs.forEach(div => {
    const input = div.querySelector("input");
    div.addEventListener("click", (e) => {
      if (e.target.tagName.toLowerCase() === "button") e.preventDefault();
      if (!input) return;

      if (input.type === "radio") {
        if (!input.checked) {
          input.checked = true;
          input.dispatchEvent(new Event("change", { bubbles: true }));
        }
      } else if (input.type === "checkbox") {
        input.checked = !input.checked;
        input.dispatchEvent(new Event("change", { bubbles: true }));
      }
    });
  });

  prevBtn.style.display = currentStep === 0 ? "none" : "inline-flex";
  nextBtn.textContent = "–î–∞–ª–µ–µ";
}

// ====== –ü–†–û–ì–†–ï–°–° ======
function goNextStep() {
  if (progressPercent < 100) {
    progressPercent += 20;
    progressPercent = Math.min(progressPercent, 100);
  }

  quizBarSuccess.style.width = `${progressPercent}%`;
  quizBarText.textContent = `–ø—Ä–æ–π–¥–µ–Ω –Ω–∞ ${progressPercent}%`;

  if (currentStep < quizObj.length - 1) {
    currentStep++;
    renderStep();
  } else {
    quizApp.style.display = "none";
    document.querySelector(".quiz__manager").style.display = "none";
    document.querySelector(".quiz__form.form-quiz").style.display = "block";
  }
}

function goPrevStep() {
  if (progressPercent > 0) {
    progressPercent -= 20;
    progressPercent = Math.max(progressPercent, 0);
  }
  quizBarSuccess.style.width = `${progressPercent}%`;
  quizBarText.textContent = `–ø—Ä–æ–π–¥–µ–Ω –Ω–∞ ${progressPercent}%`;

  if (currentStep > 0) {
    currentStep--;
    renderStep();
  }
}

// ====== –ö–ù–û–ü–ö–ò ======
nextBtn.addEventListener("click", goNextStep);
prevBtn.addEventListener("click", goPrevStep);

// ====== –ó–ê–ö–†–´–¢–ò–ï –ú–û–ë–ò–õ–¨–ù–û–ì–û –ü–û–ü–ê–ü–ê ======
mobQuizClose.addEventListener("click", () => {
  quizContainer.classList.remove("mob-quiz-active");
  document.documentElement.classList.remove("lock");

  // –°–±—Ä–æ—Å
  currentStep = 0;
  progressPercent = 0;
  quizBarSuccess.style.width = "0%";
  quizBarText.textContent = `–ø—Ä–æ–π–¥–µ–Ω –Ω–∞ 0%`;
  answers = {};
  mobQuizActivated = false;
  renderStep();
});

renderStep();







// ====== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–†–ú–´ –ö–í–ò–ó–ê ======
const quizForm = document.querySelector(".form-quiz__form");
if (quizForm) {
  quizForm.addEventListener("submit", async (e) => {
    e.preventDefault();

    const selectedSocial = quizForm.querySelector('input[name="–ö—É–¥–∞"]:checked');
    const phoneInput = quizForm.querySelector('#quizFormPhone');
    const phoneValue = phoneInput.value.replace(/\D/g, '');
    const formErrMessage = quizForm.querySelector('.form-error-message')
    const formBtnQuiz = quizForm.querySelector('.form-quiz__btn');
    const formSuccesMessage = quizForm.querySelector('.form-succes-message');

    if (!selectedSocial || !phoneInput.value.trim()) {
      formErrMessage.innerHTML = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ü—Å–µ—Ç—å –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
      return;
    }

    if (phoneValue.length < 11) {
      formErrMessage.innerHTML = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
      return;
    }

    formBtnQuiz.innerHTML = '–û—Ç–ø—Ä–∞–≤–∫–∞...'


    // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –æ–±—ä–µ–∫—Ç
    answers["–ö—É–¥–∞"] = selectedSocial.value;
    answers["–ù–æ–º–µ—Ä"] = phoneInput.value.trim();

    // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = "–ó–∞—è–≤–∫–∞ –∏–∑ –∫–≤–∏–∑–∞:\n";
    for (let key in answers) {
      message += `${key}: ${answers[key]}\n`;
    }

    console.log(message);

    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    try {
      const response = await fetch('/api/send-telegram', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ mode: 0, message })
      });

      if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞: ${response.status}`);

      const data = await response.json();
      if (data.success) {
        formBtnQuiz.innerHTML = `–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ <span>+–±–æ–Ω—É—Å</span>`;
        formErrMessage.innerHTML = '';
        formSuccesMessage.innerHTML = '–°–ø–∞—Å–∏–±–æ, –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.'
      } else {
        formBtnQuiz.innerHTML = `–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ <span>+–±–æ–Ω—É—Å</span>`;
        formErrMessage.innerHTML = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      }
    } catch (err) {
      formBtnQuiz.innerHTML = `–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–µ–∫—Ç–æ–≤ <span>+–±–æ–Ω—É—Å</span>`;
      formErrMessage.innerHTML = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", err);
    }
  });

  // –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å–æ—Ü—Å–µ—Ç–∏
  quizForm.querySelectorAll('.contacts-form__tg, .contacts-form__whatsapp, .contacts-form__max').forEach(label => {
    const input = label.querySelector('input');
    label.addEventListener('click', () => {
      quizForm.querySelectorAll('.contacts-form__tg, .contacts-form__whatsapp, .contacts-form__max').forEach(l => l.classList.remove('selected-social'));
      label.classList.add('selected-social');
      input.checked = true;
    });
  });
}




// -------------------- Reels --------------------

const reelsObj = [
  { url: 'img/reels/reels-1.mp4', name: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –∫–∞—Ä–∫–∞—Å–Ω—ã–π –¥–æ–º'},
  { url: 'img/reels/reels-2.mp4', name: '–ö–∞—Ä—Å–∫–∞—Å–Ω—ã–π –¥–æ–º –ê-—Ñ—Ä–µ–π–º' },
  { url: 'img/reels/reels-3.mp4', name: '–ö–∞—Ä–∫–∞—Å–Ω—ã–π –¥–æ–º –ë–∞—Ä–Ω—Ö–∞—É—Å' },
  { url: 'img/reels/reels-4.mp4', name: '–ö–∞—Ä–∫–∞—Å–Ω–∞—è –±–∞–Ω—è –æ—Ç ¬´–ú–∞—Ä–∏ –ö–∞—Ä–∫–∞—Å¬ª' },
];

const reelsItems = document.querySelectorAll('.reels__item');
const reelsBody = document.querySelector('.reels-popup__body');
const prevReelsBtn = document.querySelector('.reels-popup__prev');
const nextReelsBtn = document.querySelector('.reels-popup__next');
let progressBarReels = document.querySelector('.reels-popup__progress-bar')
const reelsPopap = document.querySelector('#reels-popup')
const closeReelsBtn = reelsPopap.querySelector('#reels-popup-close')

let currentIndex = 0;

function showReel(index) {
  if (index < 0) index = reelsObj.length - 1;
  if (index >= reelsObj.length) index = 0;
  currentIndex = index;

  reelsBody.innerHTML = '';

  const video = document.createElement('video');
  video.autoplay = true;
  video.loop = true;
  video.playsInline = true;
  video.muted = false;

  video.ontimeupdate = () => {
      const progress = (video.currentTime / video.duration) * 100;
      progressBarReels.style.width = `${progress}%`;
    };

  const source = document.createElement('source');
  source.src = reelsObj[index].url;
  source.type = 'video/mp4';
  video.appendChild(source);

  const info = document.createElement('div');
  info.className = 'reels-popup__info';
  info.innerHTML = `
    <div class="reels-popup__image">
      <img src="img/reels/reel-${index + 1}.webp" alt="">
    </div>
    <div class="reels-popup__name">${reelsObj[index].name}</div>
  `;

  reelsBody.appendChild(video);
  reelsBody.appendChild(info);

  video.play();
}

prevReelsBtn.addEventListener('click', () => {
  showReel(currentIndex - 1);
});

nextReelsBtn.addEventListener('click', () => {
  showReel(currentIndex + 1);
});

reelsItems.forEach((item, i) => {
  item.addEventListener('click', () => {
    showReel(i);
  });
});

closeReelsBtn.addEventListener('click', () => {
  stopVideo();
});

reelsPopap.addEventListener('click', (e) => {
  if (e.target === reelsPopap) {
    stopVideo();
  }
});

function stopVideo() {
  const video = reelsBody.querySelector('video');
  if (video) {
    video.pause();
    video.muted = true;
    video.src = '';
    video.load();
  }
  reelsBody.innerHTML = '';
}


// -------------------- Phone call popup --------------------

const popupFormCall = document.getElementById("popup-phone-form");
const popupErrorCall = popupFormCall.querySelector(".form-error-message");
const popupSuccessCall = popupFormCall.querySelector(".form-succes-call");
const submitBtnCall = popupFormCall.querySelector(".form-popup__form-btn");

popupFormCall.addEventListener("submit", function (e) {
    e.preventDefault();

    const phone = phoneInput.value.trim();
    const phoneDigits = phone.replace(/\D/g, "");

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞
    if (phoneDigits.length < 11) {
        popupErrorCall.textContent = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";
        phoneInput.classList.add("error");
        return;
    } else {
        popupErrorCall.textContent = "";
        phoneInput.classList.remove("error");
    }

    submitBtnCall.textContent = "–û—Ç–ø—Ä–∞–≤–∫–∞...";
    submitBtnCall.disabled = true;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `–ó–∞—è–≤–∫–∞ —Å –ø–æ–ø–∞–ø-—Ñ–æ—Ä–º—ã:\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}`;

    fetch("/api/send-telegram", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ mode: 0, message })
    })
        .then((response) => {
            if (!response.ok) throw new Error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + response.status);
            return response.json();
        })
        .then((data) => {
            if (data.success) {
                popupSuccessCall.textContent = "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.";
                popupSuccessCall.style.display = "block";

                // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
                phoneInput.value = "";
                submitBtnCall.textContent = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É";
            } else {
                throw new Error(data.error || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
            }
        })
        .catch((error) => {
            console.error("–û—à–∏–±–∫–∞:", error);
            popupErrorCall.textContent = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
            submitBtnCall.textContent = "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É";
        })
        .finally(() => {
            submitBtnCall.disabled = false;
        });
});




const triggersBuild = document.querySelectorAll('[data-we-build]');
const bodiesBuild = document.querySelectorAll('.we-build-popup__body');

triggersBuild.forEach(trigger => {
  trigger.addEventListener('click', () => {
    const target = trigger.dataset.weBuild;

    // —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ
    bodiesBuild.forEach(body => {
      body.style.display = 'none';
    });

    // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π
    const activeBody = document.querySelector(`[we-build-item="${target}"]`);
    if (activeBody) {
      activeBody.style.display = 'block';
    }

    // –∑–¥–µ—Å—å –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏
    // openModal();  // –ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ
  });
});
